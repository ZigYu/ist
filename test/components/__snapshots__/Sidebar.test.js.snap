// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Sidebar /> Структура Sidebar по умолчанию 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Sidebar
    openIcon={
      <IconHamburger
        className=""
      />
    }
    position="left"
  >
    <div>
      test
    </div>
  </Sidebar>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ButtonOpen
          isOpen={false}
          onClick={[Function]}
          openIcon={
            <IconHamburger
              className=""
            />
          }
          position="left"
        >
          <div>
            test
          </div>
        </ButtonOpen>,
        <div
          className="contentWrapper"
        >
          <div
            className="content"
          >
            <ButtonClose
              className="buttonClose"
              isOpen={false}
              isTransparent={true}
              onClick={[Function]}
            />
            <div>
              test
            </div>
          </div>
        </div>,
      ],
      "className": "sidebar left",
      "pose": "closed",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <div>
            test
          </div>,
          "isOpen": false,
          "onClick": [Function],
          "openIcon": <IconHamburger
            className=""
          />,
          "position": "left",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "test",
          },
          "ref": null,
          "rendered": "test",
          "type": "div",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="content"
          >
            <ButtonClose
              className="buttonClose"
              isOpen={false}
              isTransparent={true}
              onClick={[Function]}
            />
            <div>
              test
            </div>
          </div>,
          "className": "contentWrapper",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <ButtonClose
                className="buttonClose"
                isOpen={false}
                isTransparent={true}
                onClick={[Function]}
              />,
              <div>
                test
              </div>,
            ],
            "className": "content",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "className": "buttonClose",
                "isOpen": false,
                "isTransparent": true,
                "onClick": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "test",
              },
              "ref": null,
              "rendered": "test",
              "type": "div",
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "render": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ButtonOpen
            isOpen={false}
            onClick={[Function]}
            openIcon={
              <IconHamburger
                className=""
              />
            }
            position="left"
          >
            <div>
              test
            </div>
          </ButtonOpen>,
          <div
            className="contentWrapper"
          >
            <div
              className="content"
            >
              <ButtonClose
                className="buttonClose"
                isOpen={false}
                isTransparent={true}
                onClick={[Function]}
              />
              <div>
                test
              </div>
            </div>
          </div>,
        ],
        "className": "sidebar left",
        "pose": "closed",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <div>
              test
            </div>,
            "isOpen": false,
            "onClick": [Function],
            "openIcon": <IconHamburger
              className=""
            />,
            "position": "left",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "test",
            },
            "ref": null,
            "rendered": "test",
            "type": "div",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <div
              className="content"
            >
              <ButtonClose
                className="buttonClose"
                isOpen={false}
                isTransparent={true}
                onClick={[Function]}
              />
              <div>
                test
              </div>
            </div>,
            "className": "contentWrapper",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <ButtonClose
                  className="buttonClose"
                  isOpen={false}
                  isTransparent={true}
                  onClick={[Function]}
                />,
                <div>
                  test
                </div>,
              ],
              "className": "content",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "className": "buttonClose",
                  "isOpen": false,
                  "isTransparent": true,
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "test",
                },
                "ref": null,
                "rendered": "test",
                "type": "div",
              },
            ],
            "type": "div",
          },
          "type": "div",
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "render": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
